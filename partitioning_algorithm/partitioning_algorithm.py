
import copy
from Functional.__tools__ import select_regions
import numpy as np

class partitioning:
    def __init__(self, subregion:dict, 
                 dim_index:int, dim:int, uni_sample: dict, 
                 uni_rob: dict, iteration: int, part_number:int):
        '''
       Partitioning Algorithm
       Parameters:
    #         subregion: region need to be partitioned in dict formet for one iteration
    #         part_number (int): how many subregions that needed to be generated by the algorithm
    #         dim_index (int): indicate the demision needed to be partitioned
    #         dim(int): dimension
   
    #     Returns:
    #         part_sub (dist): subregions with new serial numbers
        '''
        self.subregion = subregion ##subregions that needed to be partitioned
        self.dim_index = dim_index
        self.dim = dim
        self.uni_sample = uni_sample
        self.uni_rob = uni_rob
        self.iteration = iteration
        self.part_number = part_number
        
        

    def __condition__(self, sub_index):

        assert len(self.subregion[sub_index][0]) == self.dim
        assert len(self.subregion[sub_index][1]) == self.dim

    def partitioning_algorithm(self):

        uni_select_X = {}
        uni_select_Y = {}
        part_sub = {}

        for sub_index in self.subregion.keys():
            self.__condition__(sub_index)
            sl_coordinate_upper = self.subregion[sub_index][self.dim_index][1]
            sl_coordinate_lower = self.subregion[sub_index][self.dim_index][0]

            for j in range(self.part_number): 
                l_coordinate_lower = float((sl_coordinate_upper - sl_coordinate_lower))* j / self.part_number+ \
                                                        sl_coordinate_lower
                l_coordinate_upper = float((sl_coordinate_upper- sl_coordinate_lower) * (j + 1)) / \
                                                        self.part_number + sl_coordinate_lower
                
                sub_series = str(eval(sub_index)*self.part_number + j - (self.part_number - 1))
                part_sub[sub_series]= copy.deepcopy(self.subregion[sub_index])
                part_sub[sub_series][self.dim_index] = [l_coordinate_lower, l_coordinate_upper]
                if self.iteration != 0:
                    #print('series:',sub_series)
                    uni_select_X[sub_series], uni_select_Y[sub_series] = select_regions(self.uni_sample[sub_index],
                                                        part_sub[sub_series], self.uni_rob[sub_index], 
                                                        self.dim)
        # if self.iter == 0:
        #     uni_select_X = np.array([])
        #     uni_select_Y = np.array([])
            

        return part_sub, uni_select_X, uni_select_Y
            
   